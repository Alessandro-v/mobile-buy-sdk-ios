//
//  BUYImageKit.m
//  Mobile Buy SDK
//
//  Created by Rune Madsen on 2015-07-17.
//  Copyright (c) 2015 Shopify. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "BUYImageKit.h"


@implementation BUYImageKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawVariantCloseImageWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* closeColor = [UIColor colorWithRed: 0.596 green: 0.596 blue: 0.596 alpha: 1];

    //// Variant Close Icon Drawing
    UIBezierPath* variantCloseIconPath = UIBezierPath.bezierPath;
    [variantCloseIconPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.13971 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06114 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.93886 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.86029 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.86029 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93886 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.06114 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.13971 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.13971 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06114 * CGRectGetHeight(frame))];
    [variantCloseIconPath closePath];
    [variantCloseIconPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.86029 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06114 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.93886 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.13971 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.13971 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93886 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.06114 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.86029 * CGRectGetHeight(frame))];
    [variantCloseIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.86029 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06114 * CGRectGetHeight(frame))];
    [variantCloseIconPath closePath];
    [closeColor setFill];
    [variantCloseIconPath fill];
}

+ (void)drawPreviousSelectionIndicatorImageWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* indicatorColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Previous Selection Indicator Drawing
    UIBezierPath* previousSelectionIndicatorPath = UIBezierPath.bezierPath;
    [previousSelectionIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.22386 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77614 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.22386 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.77614 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.00000 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.22386 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.50000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.77614 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.77614 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath closePath];
    [previousSelectionIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74926 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28003 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.40000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.62929 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.25074 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.48003 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.18002 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55074 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.39926 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76997 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.40000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76924 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.40073 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.76997 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.81997 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.35074 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74926 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28003 * CGRectGetHeight(frame))];
    [previousSelectionIndicatorPath closePath];
    [indicatorColor setFill];
    [previousSelectionIndicatorPath fill];
}

+ (void)drawDisclosureIndicatorImageWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* arrowColor = [UIColor colorWithRed: 0.75 green: 0.75 blue: 0.75 alpha: 1];

    //// Disclosure Indicator Drawing
    UIBezierPath* disclosureIndicatorPath = UIBezierPath.bezierPath;
    [disclosureIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.25149 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06878 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.93995 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49908 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.79854 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.58746 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11004 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15717 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.25149 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06878 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath closePath];
    [disclosureIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.79854 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41253 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.93995 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50092 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.25149 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93121 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11004 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84282 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.79854 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.41253 * CGRectGetHeight(frame))];
    [disclosureIndicatorPath closePath];
    [arrowColor setFill];
    [disclosureIndicatorPath fill];
}

+ (void)drawProductViewCloseImageWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* closeColor2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* closeShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* closeDropShadow = [[NSShadow alloc] init];
    [closeDropShadow setShadowColor: [closeShadowColor colorWithAlphaComponent: 0.15]];
    [closeDropShadow setShadowOffset: CGSizeMake(0.1, 1.1)];
    [closeDropShadow setShadowBlurRadius: 2];

    //// Close Icon Drawing
    UIBezierPath* closeIconPath = UIBezierPath.bezierPath;
    [closeIconPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15977 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.09548 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.90452 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84024 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.84025 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.90452 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.09547 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15976 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15977 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.09548 * CGRectGetHeight(frame))];
    [closeIconPath closePath];
    [closeIconPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.84025 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.09548 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.90452 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15976 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15977 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.90452 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.09547 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84024 * CGRectGetHeight(frame))];
    [closeIconPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.84025 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.09548 * CGRectGetHeight(frame))];
    [closeIconPath closePath];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, closeDropShadow.shadowOffset, closeDropShadow.shadowBlurRadius, [closeDropShadow.shadowColor CGColor]);
    [closeColor2 setFill];
    [closeIconPath fill];
    CGContextRestoreGState(context);
}

+ (void)drawProductViewBackImageWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* indicatorShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* indicatorColor2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Shadow Declarations
    NSShadow* indicatorDropShadow = [[NSShadow alloc] init];
    [indicatorDropShadow setShadowColor: [indicatorShadowColor colorWithAlphaComponent: 0.15]];
    [indicatorDropShadow setShadowOffset: CGSizeMake(0.1, 1.1)];
    [indicatorDropShadow setShadowBlurRadius: 2];

    //// Back Indicator Drawing
    UIBezierPath* backIndicatorPath = UIBezierPath.bezierPath;
    [backIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.10000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame))];
    [backIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.80000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.92000 * CGRectGetHeight(frame))];
    [backIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.93333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84000 * CGRectGetHeight(frame))];
    [backIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.36667 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame))];
    [backIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.93333 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.16000 * CGRectGetHeight(frame))];
    [backIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.80000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.08000 * CGRectGetHeight(frame))];
    [backIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.10000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50000 * CGRectGetHeight(frame))];
    [backIndicatorPath closePath];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, indicatorDropShadow.shadowOffset, indicatorDropShadow.shadowBlurRadius, [indicatorDropShadow.shadowColor CGColor]);
    [indicatorColor2 setFill];
    [backIndicatorPath fill];
    CGContextRestoreGState(context);
}

+ (void)drawVariantBackImageWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* indicatorColor3 = [UIColor colorWithRed: 0.596 green: 0.596 blue: 0.596 alpha: 1];

    //// Variant Back Indicator Drawing
    UIBezierPath* variantBackIndicatorPath = UIBezierPath.bezierPath;
    [variantBackIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.20956 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.42225 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.86663 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.86029 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74878 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.93886 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.09171 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.50082 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.20956 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.42225 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath closePath];
    [variantBackIndicatorPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74878 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06114 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.86663 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.13971 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.20956 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.57775 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.09171 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.49918 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.74878 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.06114 * CGRectGetHeight(frame))];
    [variantBackIndicatorPath closePath];
    [indicatorColor3 setFill];
    [variantBackIndicatorPath fill];
}

#pragma mark Generated Images

+ (UIImage*)imageOfVariantCloseImageWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [BUYImageKit drawVariantCloseImageWithFrame: frame];

    UIImage* imageOfVariantCloseImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfVariantCloseImage;
}

+ (UIImage*)imageOfPreviousSelectionIndicatorImageWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [BUYImageKit drawPreviousSelectionIndicatorImageWithFrame: frame];

    UIImage* imageOfPreviousSelectionIndicatorImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfPreviousSelectionIndicatorImage;
}

+ (UIImage*)imageOfDisclosureIndicatorImageWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [BUYImageKit drawDisclosureIndicatorImageWithFrame: frame];

    UIImage* imageOfDisclosureIndicatorImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfDisclosureIndicatorImage;
}

+ (UIImage*)imageOfProductViewCloseImageWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [BUYImageKit drawProductViewCloseImageWithFrame: frame];

    UIImage* imageOfProductViewCloseImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfProductViewCloseImage;
}

+ (UIImage*)imageOfProductViewBackImageWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [BUYImageKit drawProductViewBackImageWithFrame: frame];

    UIImage* imageOfProductViewBackImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfProductViewBackImage;
}

+ (UIImage*)imageOfVariantBackImageWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [BUYImageKit drawVariantBackImageWithFrame: frame];

    UIImage* imageOfVariantBackImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfVariantBackImage;
}

@end
